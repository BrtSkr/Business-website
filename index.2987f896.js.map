{"mappings":"AAAA,IAAIA,YAAcC,SAASC,cAAc,cAGzC,SAASC,kBACPC,aAAY,KACV,IAAIC,EAAaC,OAAOC,YACpBC,EAAcP,SAASC,cAAc,iBACrCO,EAAiBR,SAASC,cAAc,wBAGxCG,GAAc,KAChBL,YAAYU,MAAMC,OAAS,MAC3BH,EAAYE,MAAME,IAAM,IACxBH,EAAeC,MAAME,IAAM,IAC3BC,QAAQC,IAAI,gDAIZd,YAAYU,MAAMC,OAAS,cAC3BH,EAAYE,MAAME,IAAM,QACxBH,EAAeC,MAAME,IAAM,QAC3BC,QAAQC,IAAI,+CACd,GAEC,IACL,CAGA,SAASC,WACPT,OAAOU,SAASJ,IAClB,CAEAK,eAAiBhB,SAASC,cAAc,cACxCgB,WAAajB,SAASkB,iBAAiB,aACvCC,YAAcnB,SAASC,cAAc,cAErC,MAAMmB,SACJC,YAAYC,EAAcC,EAAYC,GACpCC,KAAKH,aAAeA,EACpBG,KAAKF,WAAaA,EAClBE,KAAKD,SAAWA,CAClB,CACAE,UACED,KAAKH,aAAab,MAAME,IAAM,IAChC,CACAgB,WACEF,KAAKH,aAAab,MAAME,IAAM,OAC9BC,QAAQC,IAAI,SACd,EAGF,IAAIe,SAAW,IAAIR,SAASJ,eAAgBC,WAAYE,aAcxD,SAASU,kBACP7B,SAASC,cAAc,SAAS6B,iBAAiB,SAAUC,IACzD,MAAMC,EAAMD,EAAME,OAAOC,QAAQ,UAE/BF,IACCA,EAAIG,UAAUC,SAAS,YACtBJ,EAAIG,UAAUC,SAAS,eACvBJ,EAAIG,UAAUC,SAAS,eACvBJ,EAAIG,UAAUC,SAAS,aAEzBpC,SAASqC,eAAeL,EAAIM,QAAQC,IAAIC,iBAC/BR,EAAIG,UAAUC,SAAS,YAChCtB,UAAA,IAGJd,SAASC,cAAc,WAAW6B,iBAAiB,SAAUC,IACvDA,EAAME,OAAOE,UAAUC,SAAS,YAClCpC,SAASqC,eAAeN,EAAME,OAAOK,QAAQC,IAAIC,gBAAc,GAGrE,CA/BArB,YAAYW,iBAAiB,SAAS,KACpCF,SAASD,UAAQ,IAGnBV,WAAWwB,SAASC,IAClBA,EAAGZ,iBAAiB,SAAS,KAC3BF,SAASF,SAAO,GAClB,IA0BF,MAAMiB,YAAc,IAAIC,sBACtBC,IACEA,EAAQJ,SAAQK,IACd,GAAIA,EAAMC,eAAgB,CACX/C,SAASkB,iBAAiB,WAChCuB,SAAQO,IACfA,EAAMb,UAAUc,IAAI,UAEtB,IAGF,IAEJN,YAAYO,QAAQlD,SAASC,cAAc,UAI3CF,YAAY+B,iBAAiB,QAAShB,UAItC,MAAMqC,aAAe,KACnB,IAAIC,EAASpD,SAASC,cAAc,WACpCoD,YAAW,KACTD,EAAOE,QAAM,GACZ,MAILxB,iBAAiB,QAAQ,KACvB5B,kBACAiD,eACAtB,iBAAA","sources":["assets/js/javascript.js"],"sourcesContent":["let scrollUpBtn = document.querySelector(\".scroll-up\");\r\n\r\n//checks current pageYoffset every 2s and if it's position is equal or greater than desired value\r\nfunction checkCurrentPos() {\r\n  setInterval(() => {\r\n    let currentPos = window.pageYOffset;\r\n    let navbarFixed = document.querySelector(\".navbar-fixed\");\r\n    let navMobileFixed = document.querySelector(\".navbar-mobile-fixed\");\r\n    //Checks if currentPos is equal or higher than desired value\r\n    //if it's true then scrollUpBtn and navbar fixed appears\r\n    if (currentPos >= 300) {\r\n      scrollUpBtn.style.margin = \"0vh\";\r\n      navbarFixed.style.top = \"0\";\r\n      navMobileFixed.style.top = \"0\";\r\n      console.log(\"scroll up and navbar-fixed are now visible\");\r\n    }\r\n    //otherwise it's still hidden\r\n    else {\r\n      scrollUpBtn.style.margin = \"0 -10vh 0 0\";\r\n      navbarFixed.style.top = \"-25vh\";\r\n      navMobileFixed.style.top = \"-25vh\";\r\n      console.log(\"navbar-fixed and scrollUpBtn are now hidden\");\r\n    }\r\n    //console.log(currentPos);\r\n  }, 2000);\r\n}\r\n\r\n//Scrolls to top of the webpage (used for scroll up button)\r\nfunction scrollUp() {\r\n  window.scrollTo(top);\r\n}\r\n\r\nslidingElement = document.querySelector(\".nav-slide\");\r\nopenButton = document.querySelectorAll(\".nav-mbtn\");\r\ncloseButton = document.querySelector(\".nav-close\");\r\n\r\nclass NavSlide {\r\n  constructor(slideElement, openNavBtn, closeBtn) {\r\n    this.slideElement = slideElement;\r\n    this.openNavBtn = openNavBtn;\r\n    this.closeBtn = closeBtn;\r\n  }\r\n  openNav() {\r\n    this.slideElement.style.top = \"0%\";\r\n  }\r\n  closeNav() {\r\n    this.slideElement.style.top = \"100%\";\r\n    console.log(\"worked\");\r\n  }\r\n}\r\n\r\nlet slideNav = new NavSlide(slidingElement, openButton, closeButton);\r\n\r\n//on click close nav (mobile)\r\ncloseButton.addEventListener(\"click\", () => {\r\n  slideNav.closeNav();\r\n});\r\n//In mobile navs for each 'menu button' adds event listener with function from class\r\nopenButton.forEach((el) => {\r\n  el.addEventListener(\"click\", () => {\r\n    slideNav.openNav();\r\n  });\r\n});\r\n\r\n//scroll into view to specified section on button click in navbar\r\nfunction scrollToSection() {\r\n  document.querySelector(\".navs\").addEventListener(\"click\", (event) => {\r\n    const tgt = event.target.closest(\"button\");\r\n    if (\r\n      tgt &&\r\n      (tgt.classList.contains(\"teamBtn\") ||\r\n        tgt.classList.contains(\"serviceBtn\") ||\r\n        tgt.classList.contains(\"contactBtn\") ||\r\n        tgt.classList.contains(\"aboutBtn\"))\r\n    ) {\r\n      document.getElementById(tgt.dataset.id).scrollIntoView();\r\n    } else if (tgt.classList.contains(\"homeBtn\")) {\r\n      scrollUp();\r\n    }\r\n  });\r\n  document.querySelector(\".header\").addEventListener(\"click\", (event) => {\r\n    if (event.target.classList.contains(\"seeMore\")) {\r\n      document.getElementById(event.target.dataset.id).scrollIntoView();\r\n    }\r\n  });\r\n}\r\n//Lazy Loading\r\nconst lazyLoading = new IntersectionObserver(\r\n  entries => {\r\n    entries.forEach(entry => {\r\n      if (entry.isIntersecting) {\r\n      const images = document.querySelectorAll('.images')\r\n        images.forEach(image => {\r\n        image.classList.add('show')\r\n      })\r\n      }\r\n  \r\n    \r\n    })\r\n});\r\nlazyLoading.observe(document.querySelector(\".team\"))\r\n\r\n//Event listener for scrollUpBtn (It just scrolls up to the top of the document)\r\n//Might be changed in the future for more universal usage\r\nscrollUpBtn.addEventListener(\"click\", scrollUp);\r\n\r\n// removes element after specified time\r\n// currently removes loader\r\nconst removeLoader = () => {\r\n  let loader = document.querySelector(\".loader\");\r\n  setTimeout(() => {\r\n    loader.remove();\r\n  }, 2000);\r\n};\r\n\r\n//event listener with all functions that will be loaded on load\r\naddEventListener(\"load\", () => {\r\n  checkCurrentPos();\r\n  removeLoader();\r\n  scrollToSection();\r\n});\r\n"],"names":["scrollUpBtn","document","querySelector","checkCurrentPos","setInterval","currentPos","window","pageYOffset","navbarFixed","navMobileFixed","style","margin","top","console","log","scrollUp","scrollTo","slidingElement","openButton","querySelectorAll","closeButton","NavSlide","constructor","slideElement","openNavBtn","closeBtn","this","openNav","closeNav","slideNav","scrollToSection","addEventListener","event","tgt","target","closest","classList","contains","getElementById","dataset","id","scrollIntoView","forEach","el","lazyLoading","IntersectionObserver","entries","entry","isIntersecting","image","add","observe","removeLoader","loader","setTimeout","remove"],"version":3,"file":"index.2987f896.js.map"}